
number = @{ (ASCII_DIGIT)+ }
string = { ASCII_ALPHANUMERIC* }
string_literal = { "\"" ~ string ~ "\"" }
identifier = @{ ASCII_ALPHANUMERIC+ }

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ ANY* }

plus = { "+" } 
minus = { "-" }
multi = { "*" }
divide = { "/" }

logical_and = { "&&" }
logical_or = { "||" }
logical_eq = { "==" }
logical_smaller = { "<" }
logical_bigger = { ">" }
logical_smaller_eq = { "<=" }
logical_bigger_eq = { ">=" }
logical_not_eq = { "!=" }

factor = { 
    "(" ~ expr ~ ")" | 
    number |
    truth |
    identifier | 
    string_literal
}

if_expr = { "if" ~ expr ~ "{" ~ stmt ~ "}" }
while_expr = { "while" ~ expr ~ "{" ~ stmt ~ "}" }
for_expr = { "for" ~ expr ~ "{" ~ stmts ~ "}" }
call_expr = { identifier ~ "(" ~ expr ~ ")" }
match_expr = { "match" ~ expr ~ "{" ~ match_case ~ "}" }
object_expr = { "{" ~ identifier ~ ":" ~ expr "}" }

term = { factor ~ ((multi | divide) ~ factor)* }
expr = { 
    term ~ ((plus | minus) ~ term)* ~ 
    ((
        logical_and | 
        logical_or | 
        logical_eq | 
        logical_smaller_eq |
        logical_bigger_eq |
        logical_smaller | 
        logical_bigger |
        logical_not_eq |
        is |
        not
    ) ~ expr)? |
    if_expr |
    while_expr |
    for_expr |
    call_expr |
    match_expr |
    object_expr
}

int_type = { "int" }
bool_type = { "bool" }
string_type = { "string" }
object_type = { "{" ~ type_field ~ "}" }

type_def = { int_type | bool_type | string_type | object_type }

match_case = { "case" ~ expr ~ ":" ~ expr ~ ";" }

type_field = { identifier ~ ":" ~ type_def }

assignment_stmt = { identifier ~ "=" ~ expr }
use_stmt = { "use" ~ identifier }
enum_stmt = { "enum" ~ identifier ~ "{" ~ identifier ~ "}" }
struct_stmt = { "struct" ~ identifier ~ "{" ~ identifier ~ "}" }
type_stmt = { "type" ~ identifier ~ type_def }
return_stmt = { "return" ~ expr }
break_stmt = { "break" }
continue_stmt = { "continue" }
assignment_stmt = { identifier ~ "=" ~ expr }

stmt = {
    expr |
    assignment_stmt |
    use_stmt |
    enum_stmt |
    struct_stmt |
    type_stmt
}

stmts = { stmt* }

file = { SOI ~  stmts? ~ EOI }