
integer = @{ (ASCII_DIGIT)+ }
float = @{ (ASCII_DIGIT)+ ~ "." ~ (ASCII_DIGIT)+ }
string = { ASCII_ALPHANUMERIC* }
string_literal = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

method_call = { "." ~ identifier ~ "(" ~ (stmt ~ ("," ~ stmt)*)? ~ ")" }
member_access = { "." ~ identifier }
identifier = @{ (ASCII_ALPHANUMERIC | "_" )+ ~ (method_call | member_access)? }

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ ANY* }

plus = { "+" } 
minus = { "-" }
multi = { "*" }
divide = { "/" }
modulo = { "%" }

logical_and = { "&&" }
logical_or = { "||" }
logical_eq = { "==" }
logical_lt = { "<" }
logical_lte = { "<=" }
logical_gt = { ">" }
logical_gte = { ">=" }
logical_neq = { "!=" }

true_bool = { "true" }
false_bool = { "false" }

bool_lit = { 
    true_bool | 
    false_bool
}

factor = { 
    "(" ~ expr ~ ")" | 
    float |
    integer |
    bool_lit |
    identifier | 
    string_literal
}

while_expr = { "while" ~ expr ~ "{" ~ stmt ~ "}" }
for_expr = { "for" ~ (identifier ~ "in" ~ ( range_expr | expr ))? ~ "{" ~ "}" }


range_expr = { expr? ~ ".." ~ expr? }

term_op = { multi | divide }

term = { factor ~ (term_op ~ factor)* }

logical_op = { 
    logical_and | 
    logical_or | 
    logical_eq | 
    logical_lt | 
    logical_lte |
    logical_gt | 
    logical_gte | 
    logical_neq
}

expr = {
    term ~ ((plus | minus) ~ term)* ~ 
    (logical_op ~ expr)?
}

int_type = { "int" }
float_type = { "float" }
bool_type = { "bool" }
string_type = { "string" }
object_type = { "{" ~ type_field ~ "}" }

non_null_type = { int_type | float_type | bool_type | string_type | object_type }
array_type = { non_null_type ~ "[]" }
//maybe_type = { (array_type | non_null_type) ~ "?" }
maybe_type = { non_null_type ~ "?" }
// type_def = { maybe_type | array_type | non_null_type }
type_def = { non_null_type ~ "?"? }

field_decorator = { "@" ~ identifier ~ "(" ~ expr ~ ")" }

const_stmt = { "const" ~ identifier ~ type_def? ~ "=" ~ stmt }
let_stmt = { "let" ~ identifier ~ type_def ~ "=" ~ expr }
assignment_stmt = { identifier ~ "=" ~ expr }
use_stmt = { "use" ~ identifier }

struct_field = { identifier ~ type_def? ~ ("=" ~ stmt)? }
struct_stmt = { "struct" ~ identifier  ~ "{" ~ struct_field* ~ "}" }

struct_init_field = { identifier ~ ":" ~ stmt }
struct_init = { identifier ~ "{" ~ struct_init_field* ~ "}" }

enum_field_object_field = { identifier ~ type_def }
enum_field_object = { "{" ~ enum_field_object_field* ~ "}" }
enum_field_tuple = { "(" ~ identifier* ~ ")" }
enum_field = { identifier ~ (enum_field_object | enum_field_tuple)? }
enum_stmt = { "enum" ~ identifier ~ "{" ~ enum_field* ~ "}" }

type_field = { identifier ~ type_def ~ field_decorator* }
type_object = { "{" ~ type_field* ~ "}" }
type_simple = { type_def }
type_stmt = { "type" ~ identifier ~ (type_object | type_simple) }

return_stmt = { "return" ~ expr }
break_stmt = { "break" }
continue_stmt = { "continue" }

function_arg = { identifier ~ type_def? }
function_args = { function_arg ~ ("," ~ function_arg)* }
function_stmt = { "async"? ~ "(" ~ function_args? ~ ")" ~ "=>" ~ "{" ~ stmts? ~ "}" }

object_stmt_field = { identifier ~ ":" ~ expr }
object_stmt = { "{" ~ object_stmt_field* ~ "}" }

if_branch = { "if" ~ expr ~ "{" ~ stmts? ~ "}" }
else_if_branch = { "else if" ~ expr ~ "{" ~ stmts? ~ "}" }
else_branch = { "else" ~ "{" ~ stmts? ~ "}" }
if_stmt = { if_branch ~ else_if_branch* ~ else_branch? }

match_condition = { expr ~ ( "|" ~ match_condition )* }
match_case = { ( "_" | match_condition ) ~ "=>" ~ stmt }
match_stmt = { "match" ~ stmt ~ "{" ~ match_case* ~ "}" }

xml_atribute = { identifier ~ "=" ~ ( string_literal | "{" ~ expr ~ "}" ) }
xml_child = { xml_stmt | identifier | ( "{" ~ identifier ~ "}" ) }
xml_stmt = { ("<" ~ identifier ~ xml_atribute* ~ ">" ~ xml_child* ~ "</" ~ identifier ~ ">") }

call_args = { stmt ~ ("," ~ stmt)* }
call_stmt = { identifier ~ "(" ~ call_args? ~ ")" }

array_items = { stmt ~ ("," ~ stmt)* }
array_stmt = { "[" ~ array_items* ~ "]" }


sql_select_parameters = { identifier ~ ("," ~ identifier)? }
sql_from = { "from" ~ identifier ~ ("as" ~ identifier)? }
sql_where_condition = { identifier ~ "==" ~ expr ~ ( ( "and" | "or" ) ~ sql_where_condition )? }
sql_where = { "where" ~ identifier ~ "==" ~ stmt }
sql_select = { "select" ~ sql_select_parameters ~ sql_from ~ sql_where }
sql_insert = { "insert" ~ "into" ~ identifier ~ "(" ~ identifier ~ ")" ~ "values" ~ "(" ~ stmt ~ ")" }
sql_update = { "update" ~ identifier ~ "set" ~ identifier ~ "=" ~ stmt ~ sql_where }
sql_stmt = { sql_select | sql_insert | sql_update }

block_stmt = { "{" ~ stmts? ~ "}" }

stmt = {
    struct_stmt |
    for_expr |
    const_stmt |
    let_stmt |
    assignment_stmt |
    if_stmt |
    use_stmt |
    enum_stmt |
    struct_init |
    type_stmt |
    return_stmt |
    break_stmt |
    continue_stmt |
    function_stmt |
    range_expr |
    object_stmt |
    match_stmt |
    block_stmt |
    xml_stmt |
    call_stmt |
    array_stmt |
    sql_stmt |
    expr
}

// stmt = {
//     sql_stmt
// }

stmts = { stmt* }

file = { SOI ~  stmts? ~ EOI }