
number = @{ (ASCII_DIGIT)+ }
string = { ASCII_ALPHANUMERIC* }
string_literal = { "\"" ~ string ~ "\"" }
identifier = @{ ASCII_ALPHANUMERIC+ }

WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "/*" ~ (!"*/" ~ ANY)* ~ "*/" | "//" ~ ANY* }

plus = { "+" } 
minus = { "-" }
multi = { "*" }
divide = { "/" }

logical_and = { "&&" }
logical_or = { "||" }
logical_eq = { "==" }
logical_smaller = { "<" }
logical_bigger = { ">" }
logical_smaller_eq = { "<=" }
logical_bigger_eq = { ">=" }
logical_not_eq = { "!=" }

true_bool = { "true" }
false_bool = { "false" }

bool_lit = { 
    true_bool | 
    false_bool
}

factor = { 
    "(" ~ expr ~ ")" | 
    number |
    bool_lit |
    identifier | 
    string_literal
}

while_expr = { "while" ~ expr ~ "{" ~ stmt ~ "}" }
for_expr = { "for" ~ (identifier ~ "in" ~ ( range_expr | expr ))? ~ "{" ~ "}" }
call_expr = { identifier ~ "(" ~ expr ~ ")" }

range_expr = { expr? ~ ".." ~ expr? }

term = { factor ~ ((multi | divide) ~ factor)* }
expr = {
    term ~ ((plus | minus) ~ term)* ~ 
    ((
        logical_and | 
        logical_or | 
        logical_eq | 
        logical_smaller_eq |
        logical_bigger_eq |
        logical_smaller | 
        logical_bigger |
        logical_not_eq
    ) ~ expr)? |
    while_expr |
    call_expr
}

int_type = { "int" }
bool_type = { "bool" }
string_type = { "string" }
object_type = { "{" ~ type_field ~ "}" }

type_def = { int_type | bool_type | string_type | object_type }

field_decorator = { "@" ~ identifier ~ "(" ~ expr ~ ")" }

const_stmt = { "const" ~ identifier ~ type_def? ~ "=" ~ stmt }
let_stmt = { "let" ~ identifier ~ type_def ~ "=" ~ expr }
assignment_stmt = { identifier ~ "=" ~ expr }
use_stmt = { "use" ~ identifier }
struct_stmt = { "struct" ~ identifier ~ "{" ~ identifier ~ "}" }

enum_field_object_field = { identifier ~ type_def }
enum_field_object = { "{" ~ enum_field_object_field* ~ "}" }
enum_field_tuple = { "(" ~ identifier* ~ ")" }
enum_field = { identifier ~ (enum_field_object | enum_field_tuple)? }
enum_stmt = { "enum" ~ identifier ~ "{" ~ enum_field* ~ "}" }

type_field = { identifier ~ type_def ~ field_decorator* }
type_object = { "{" ~ type_field* ~ "}" }
type_simple = { type_def }
type_stmt = { "type" ~ identifier ~ (type_object | type_simple) }

return_stmt = { "return" ~ expr }
break_stmt = { "break" }
continue_stmt = { "continue" }

function_arg = { identifier ~ type_def? }
function_args = { function_arg ~ ("," ~ function_arg)* }
function_stmt = { "(" ~ function_args? ~ ")" ~ "=>" ~ "{" ~ stmts? ~ "}" }

object_stmt_field = { identifier ~ ":" ~ expr }
object_stmt = { "{" ~ object_stmt_field* ~ "}" }

if_branch = { "if" ~ expr ~ "{" ~ stmts? ~ "}" }
else_if_branch = { "else if" ~ expr ~ "{" ~ stmts? ~ "}" }
else_branch = { "else" ~ "{" ~ stmts? ~ "}" }
if_stmt = { if_branch ~ else_if_branch* ~ else_branch? }

match_condition = { expr ~ "|" ~ match_condition* }
match_case = { ( "_" | match_condition ) ~ "=>" ~ stmt }
match_stmt = { "match" ~ expr ~ "{" ~ match_case ~ "}" }

block_stmt = { "{" ~ stmts? ~ "}" }

stmt = {
    for_expr |
    const_stmt |
    let_stmt |
    assignment_stmt |
    if_stmt |
    use_stmt |
    enum_stmt |
    struct_stmt |
    type_stmt |
    return_stmt |
    break_stmt |
    continue_stmt |
    function_stmt |
    range_expr |
    object_stmt |
    match_stmt |
    block_stmt |
    expr
}

stmts = { stmt* }

file = { SOI ~  stmts? ~ EOI }